<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BaseNodeFactory_Create" xml:space="preserve">
    <value>Error creating node {0} - {1}</value>
  </data>
  <data name="BinaryDataFrameFilterFactory_MatchDescription" xml:space="preserve">
    <value>Matching binary data</value>
  </data>
  <data name="ColorValue_InvalidStringFormat" xml:space="preserve">
    <value>Invalid color string format, should be a hex string in form of #RRGGBB or an X11 color name</value>
  </data>
  <data name="DataFrame_Exception1" xml:space="preserve">
    <value>Cannot set current node to be one from another frame</value>
  </data>
  <data name="DataReader_InvalidBitCount" xml:space="preserve">
    <value>Can only read between 0 and 63 bits from a stream at a time</value>
  </data>
  <data name="DataReader_InvalidPrimitiveType" xml:space="preserve">
    <value>Invalid primitive type passed to ReadPrimitive - {0}</value>
  </data>
  <data name="DataReader_ReadBytesEof" xml:space="preserve">
    <value>Could not read all requested bytes</value>
  </data>
  <data name="DataReader_ReadCharEof" xml:space="preserve">
    <value>Could not read a valid character from the stream</value>
  </data>
  <data name="DataWriter_InvalidBitCount" xml:space="preserve">
    <value>Can only write between 0 and 63 bits from a stream at a time</value>
  </data>
  <data name="DataWriter_InvalidPrimitiveType" xml:space="preserve">
    <value>Invalid primitive type passed to WritePrimitive - {0}</value>
  </data>
  <data name="GeneralUtils_DecodeEscapedInvalidEscape" xml:space="preserve">
    <value>Invalid escape sequence encountered</value>
  </data>
  <data name="GeneralUtils_DecodeEscapedStringTrailingSlash" xml:space="preserve">
    <value>Invalid trailing backslash in escaped string</value>
  </data>
  <data name="GeneralUtils_DecodeEscapedStringUnknownEscape" xml:space="preserve">
    <value>Unknown string escape sequence {0}</value>
  </data>
  <data name="GeneralUtils_InvalidHexString" xml:space="preserve">
    <value>String must only contain bytes in hex or spaces</value>
  </data>
  <data name="GeneralUtils_InvalidHexStringLength" xml:space="preserve">
    <value>Hex string must be a multiple of 2 hex characters</value>
  </data>
  <data name="GetConfigDir_ErrorCreatingDir" xml:space="preserve">
    <value>Error creating user config directory</value>
  </data>
  <data name="Int24_InvalidCompareObject" xml:space="preserve">
    <value>Object passed to CompareTo not a Int24</value>
  </data>
  <data name="MissingDataNodeException_DefaultMessage" xml:space="preserve">
    <value>Cannot find DataNode {0}</value>
  </data>
  <data name="NetGraphContainerFactory_MustSpecifyGraph" xml:space="preserve">
    <value>A graph must be specified for container</value>
  </data>
  <data name="NetGraphContainerNode_InvalidGraph" xml:space="preserve">
    <value>Subgraph must have a client and server node</value>
  </data>
  <data name="NetGraphFactory_NoClientEndpoint" xml:space="preserve">
    <value>Must have a client endpoint to go from client to server</value>
  </data>
  <data name="NetGraphFactory_NoServerEndpoint" xml:space="preserve">
    <value>Must have a server endpoint to go from server to client</value>
  </data>
  <data name="NetGraph_InvalidEndpointId" xml:space="preserve">
    <value>Invalid endpoint ID {0}</value>
  </data>
  <data name="NodeCountDataFrameFilterFactory_CountDescription" xml:space="preserve">
    <value>The number of selected nodes to test against</value>
  </data>
  <data name="NodeCountDataFrameFilterFactory_DisplayString" xml:space="preserve">
    <value>{0} {1} selected nodes</value>
  </data>
  <data name="NodeCountDataFrameFilterFactory_OperationDescription" xml:space="preserve">
    <value>Comparion operation</value>
  </data>
  <data name="PersistNodeImpl_InvalidConfig" xml:space="preserve">
    <value>Invalid config passed for {0} class, using existing value</value>
  </data>
  <data name="ReadLine_CountNotReadFromStream" xml:space="preserve">
    <value>Could not read out another line from the stream</value>
  </data>
  <data name="ToUnixTime_CannotConvert" xml:space="preserve">
    <value>Cannot convert {0} to unix time, out of range</value>
  </data>
  <data name="UInt24_InvalidCompareObject" xml:space="preserve">
    <value>Object passed to CompareTo not a UInt24</value>
  </data>
</root>